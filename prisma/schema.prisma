generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  phone_number String   @unique
  email        String   @unique
  password     String
  role         Role
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt


  cart     Cart[]
  order    Order[]
  review   Review[]
  address  Address[]
  checkout Checkout[]
}


model Address {
  id          Int      @id @default(autoincrement())
  user_id     Int
  street      String
  city        String
  state       String
  postal_code String
  country     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user     User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shipping Shipping[]
  checkout Checkout[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  image_url   String
  description String?
  price       Decimal
  stock       Int
  category_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]
}

model Category {
  id            Int           @id @default(autoincrement())
  category_name Category_name
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  products Product[]
}

model Cart {
  id          Int      @id @default(autoincrement())
  user_id     Int
  total_price Decimal
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  cartItems CartItem[]
  orders    Order[]
  checkouts Checkout[]
}

model CartItem {
  id             Int      @id @default(autoincrement())
  cart_id        Int
  product_id     Int
  quantity       Int
  subtotal_price Decimal
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  cart    Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Order {
  id          Int         @id @default(autoincrement())
  user_id     Int
  cart_id     Int
  total_price Decimal
  status      OrderStatus @default(Pending)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cart Cart @relation(fields: [cart_id], references: [id], onDelete: Cascade)

  orderItems OrderItem[]
  payments   Payment[]
  shippings  Shipping[]

}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      Decimal
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Payment {
  id             Int           @id @default(autoincrement())
  order_id       Int           @unique
  payment_method PaymentMethod
  payment_status PaymentStatus @default(Pending)
  payment_date   DateTime
  amount         Decimal
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  order     Order      @relation(fields: [order_id], references: [id], onDelete: Cascade)
  checkouts Checkout[]
}

model Shipping {
  id            Int            @id @default(autoincrement())
  order_id      Int            @unique
  address_id    Int
  shipping_cost Decimal
  shipping_date DateTime?
  status        ShippingStatus @default(Pending)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt

  order     Order      @relation(fields: [order_id], references: [id], onDelete: Cascade)
  address   Address    @relation(fields: [address_id], references: [id], onDelete: Cascade)
  checkouts Checkout[]
}

model Review {
  id             Int      @id @default(autoincrement())
  user_id        Int
  product_id     Int
  rating         Int
  review_content String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Checkout {
  id          Int            @id @default(autoincrement())
  user_id     Int
  cart_id     Int
  payment_id  Int
  shipping_id Int
  address_id  Int
  status      CheckoutStatus @default(Pending)
  total_price Decimal
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt

  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cart     Cart     @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  payment  Payment  @relation(fields: [payment_id], references: [id], onDelete: Cascade)
  shipping Shipping @relation(fields: [shipping_id], references: [id], onDelete: Cascade)
  address  Address  @relation(fields: [address_id], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  Pending
  Processing
  Shipped
  Delivered
  Cancelled
}

enum PaymentMethod {
  Credit_Card
  Bank_Transfer
  E_Wallet
  Cash_on_Delivery
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}

enum ShippingStatus {
  Pending
  Processing
  Shipped
  In_Transit
  Delivered
  Cancelled
}

enum CheckoutStatus {
  Pending
  Completed
  Failed
  Cancelled
}

enum Category_name {
  Chair
  Table
  Bed
  Sofa
  Wardrobe
}

enum Role {
  Admin
  User
}
